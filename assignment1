//binary search
#include <bits/stdc++.h>
using namespace std;
int binarySearch(int arr[], int low, int high, int x){
while (low <= high) {
int mid = low + (high - low) / 2;
if (arr[mid] == x)
 return mid;
if (arr[mid] < x)
low = mid + 1;
else
high = mid - 1;
}
return -1;
}

int main(void){
  int arr[] = { 2, 3, 4, 10, 40 };
  int x = 10;
  int n = sizeof(arr) / sizeof(arr[0]);
  int result = binarySearch(arr, 0, n - 1, x);
  (result == -1) ? cout << "Element is not present in array"
  : cout << "Element is present at index " << result;
  return 0;
}


//MINMAX
#include<bits/stdc++.h>
using namespace std;
int minimax(int depth, int nodeIndex, bool isMax,int scores[], int h){
	if (depth == h)
		return scores[nodeIndex];
	if (isMax)
	return max(minimax(depth+1, nodeIndex*2, false, scores, h),minimax(depth+1, nodeIndex*2 + 1, false, scores, h));
	else
return min(minimax(depth+1, nodeIndex*2, true, scores, h),
minimax(depth+1, nodeIndex*2 + 1, true, scores, h));
}
int log2(int n){
return (n==1)? 0 : 1 + log2(n/2);
}
int main(){
int scores[] = {3, 5, 2, 9, 12, 5, 23, 23};
int n = sizeof(scores)/sizeof(scores[0]);
int h = log2(n);
int res = minimax(0, 0, true, scores, h);
cout << "The optimal value is : " << res << endl;
return 0;
}




//sort an array
#include <bits/stdc++.h>
#include <algorithm>
using namespace std;

int main(){
int arr[] = { 5, 4, 1, 2, 3 };
int n = sizeof(arr) / sizeof(arr[0]);
cout << "Array Before Sorting: ";
for (int i = 0; i < n; i++) {
cout << arr[i] << " ";
}
cout << endl;
sort(arr, arr + n);
cout << "Array After Sorting: ";
for (int i = 0; i < n; i++) {
cout << arr[i] << " ";
}
return 0;
}
